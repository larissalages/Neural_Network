{"changed":true,"filter":false,"title":"projeto.m","tooltip":"/projeto.m","value":"clear\n\n%---------------------------------------------------------------------\n%DEFINIÇÃO DOS CONJUNTOS DE PARÂMETROS E VALORES DEFAULT\n%---------------------------------------------------------------------\n\n%Conjunto de valores pra variar\nfileTreino            = {'treino_oversampling.txt', 'treino_undersampling.txt', 'treino_undersamplingKM.txt', 'treino_oversamplingSMT.txt', 'treino_oversamplingSMTadp.txt'};\nfileValidacao         = {'validacao_oversampling.txt', 'validacao_undersampling.txt', 'validacao_undersamplingKM.txt', 'validacao_oversamplingSMT.txt', 'validacao_oversamplingSMTadp.txt'};\nfileTeste             = 'teste.txt';\namostrasTreino        = [40000, 700, 700, 40000, 40000];   \namostrasValidacao     = [20000, 350, 350, 20000, 20000];    \namostrasTeste         = 10175;  \nneuroniosEscondidos   = [10, 20, 40, 60]; \ntaxaAprendizado       = [0.2, 0.4, 0.6, 0.8];\nfuncaoAtivacao        = {'tansig', 'logsig', 'purelin'};\nalgoritmoAprendizagem = {'traingdm', 'trainlm', 'trainoss'};\n\n%Valores default\nfileTr = 'treino_oversampling.txt';\nfileVal = 'validacao_oversampling.txt';\nsampTr = 40000;\nsampVal = 20000;\nneuHidden = 10;\ntaxaApr = 0.2;\nfuncAtiv = 'tansig';\nalgoApren = 'traingdm';\n\n%---------------------------------------------------------------------\n%VARIA OS PARÂMETROS E ESCOLHE O MELHOR DE CADA\n%---------------------------------------------------------------------\n\n%Varia a taxa de aprendizagem e numero de neuronios ocultos\ntempAUCteste = 0; %A area tem que ser a maior possivel\ntempPorcentAcertos = 0; %tem que ser o maior valor possivel\ntempMSEteste = 9999999; %tem que ser o menor possivel\n\nfor i = 1 : length(taxaAprendizado)\n    for j = 1 : length(neuroniosEscondidos)\n        taxa = taxaAprendizado(i);\n        neuronios = neuroniosEscondidos(j);\n        [MSEtreino, MSEvalidacao, MSEteste, verdadeirosPositivos, verdadeirosNegativos, falsosPositivos, falsosNegativos, AUC] = mlp(fileTr, fileVal, fileTeste, sampTr, sampVal, amostrasTeste, neuronios, taxa, funcAtiv, algoApren);\n        \n        PorcentAcertos = 100*(verdadeirosPositivos+verdadeirosNegativos)/(amostrasTeste);\n        \n        if(AUC > tempAUCteste)\n            tempAUCteste = AUC;\n            tempPorcentAcertos = PorcentAcertos;\n            tempMSEteste = MSEteste;\n            taxaApr = taxa;\n            neuHidden = neuronios;\n        elseif((AUC == tempAUCteste) && (PorcentAcertos > tempPorcentAcertos))\n            tempPorcentAcertos = PorcentAcertos;\n            tempMSEteste = MSEteste;\n            taxaApr = taxa;\n            neuHidden = neuronios;\n        elseif((AUC == tempAUCteste) && (PorcentAcertos == tempPorcentAcertos) && (MSEteste < tempMSEteste))\n            tempMSEteste = MSEteste; \n            taxaApr = taxa;\n            neuHidden = neuronios;\n        end\n    end\nend\n\n\n%Varia a funcao de ativacao\ntempAUCteste = 0; %A area tem que ser a maior possivel\ntempPorcentAcertos = 0; %tem que ser o maior valor possivel\ntempMSEteste = 9999999; %tem que ser o menor possivel\n\nfor i = 1 : length(funcaoAtivacao)\n    funcao = cell2mat(funcaoAtivacao(i));\n    [MSEtreino, MSEvalidacao, MSEteste, verdadeirosPositivos, verdadeirosNegativos, falsosPositivos, falsosNegativos, AUC] = mlp(fileTr, fileVal, fileTeste, sampTr, sampVal, amostrasTeste, neuHidden, taxaApr, funcao, algoApren);\n        \n    PorcentAcertos = 100*(verdadeirosPositivos+verdadeirosNegativos)/(amostrasTeste);\n        \n    if(AUC > tempAUCteste)\n        tempAUCteste = AUC;\n        tempPorcentAcertos = PorcentAcertos;\n        tempMSEteste = MSEteste;\n        funcAtiv = funcao;\n    elseif((AUC == tempAUCteste) && (PorcentAcertos > tempPorcentAcertos))\n        tempPorcentAcertos = PorcentAcertos;\n        tempMSEteste = MSEteste;\n        funcAtiv = funcao;\n    elseif((AUC == tempAUCteste) && (PorcentAcertos == tempPorcentAcertos) && (MSEteste < tempMSEteste))\n        tempMSEteste = MSEteste; \n        funcAtiv = funcao;\n    end\nend\n\n\n%Varia o algoritmo de aprendizagem\ntempAUCteste = 0; %A area tem que ser a maior possivel\ntempPorcentAcertos = 0; %tem que ser o maior valor possivel\ntempMSEteste = 9999999; %tem que ser o menor possivel\n\nfor i = 1 : length(algoritmoAprendizagem)\n    algoritmo = cell2mat(algoritmoAprendizagem(i));\n    [MSEtreino, MSEvalidacao, MSEteste, verdadeirosPositivos, verdadeirosNegativos, falsosPositivos, falsosNegativos, AUC] = mlp(fileTr, fileVal, fileTeste, sampTr, sampVal, amostrasTeste, neuHidden, taxaApr, funcAtiv, algoritmo);\n        \n    PorcentAcertos = 100*(verdadeirosPositivos+verdadeirosNegativos)/(amostrasTeste);\n        \n    if(AUC > tempAUCteste)\n        tempAUCteste = AUC;\n        tempPorcentAcertos = PorcentAcertos;\n        tempMSEteste = MSEteste;\n        algoApren = algoritmo;\n    elseif((AUC == tempAUCteste) && (PorcentAcertos > tempPorcentAcertos))\n        tempPorcentAcertos = PorcentAcertos;\n        tempMSEteste = MSEteste;\n        algoApren = algoritmo;\n    elseif((AUC == tempAUCteste) && (PorcentAcertos == tempPorcentAcertos) && (MSEteste < tempMSEteste))\n        tempMSEteste = MSEteste; \n        algoApren = algoritmo;\n    end\nend\n\n\n%Varia arquivos utilizados\ntempAUCteste = 0; %A area tem que ser a maior possivel\ntempPorcentAcertos = 0; %tem que ser o maior valor possivel\ntempMSEteste = 9999999; %tem que ser o menor possivel\n\nfor i = 1 : length(fileTreino)\n    myfileTr = cell2mat(fileTreino(i));\n    myfileVal = cell2mat(fileValidacao(i));\n    mysampTr = amostrasTreino(i);\n    mysampVal = amostrasValidacao(i);\n    [MSEtreino, MSEvalidacao, MSEteste, verdadeirosPositivos, verdadeirosNegativos, falsosPositivos, falsosNegativos, AUC] = mlp(myfileTr, myfileVal, fileTeste, mysampTr, mysampVal, amostrasTeste, neuHidden, taxaApr, funcAtiv, algoApren);\n        \n    PorcentAcertos = 100*(verdadeirosPositivos+verdadeirosNegativos)/(amostrasTeste);\n        \n    if(AUC > tempAUCteste)\n        tempAUCteste = AUC;\n        tempPorcentAcertos = PorcentAcertos;\n        tempMSEteste = MSEteste;\n        fileTr = myfileTr;\n        fileVal = myfileVal;\n        sampTr = mysampTr;\n        sampVal = mysampVal;\n    elseif((AUC == tempAUCteste) && (PorcentAcertos > tempPorcentAcertos))\n        tempPorcentAcertos = PorcentAcertos;\n        tempMSEteste = MSEteste;\n        fileTr = myfileTr;\n        fileVal = myfileVal;\n        sampTr = mysampTr;\n        sampVal = mysampVal;\n    elseif((AUC == tempAUCteste) && (PorcentAcertos == tempPorcentAcertos) && (MSEteste < tempMSEteste))\n        tempMSEteste = MSEteste; \n        fileTr = myfileTr;\n        fileVal = myfileVal;\n        sampTr = mysampTr;\n        sampVal = mysampVal;\n    end\nend\n\n\n%---------------------------------------------------------------------------------------------------------------- \n% %---------------------------------------------------------------------\n% % RODA A REDE COM OS MELHORES PARAMETROS E MOSTRA AS ESTATÍSTICAS\n% %---------------------------------------------------------------------\n%----------------------------------------------------------------------------------------------------------------\n\n%Roda a rede\n[MSEtreino, MSEvalidacao, MSEteste, verdadeirosPositivos, verdadeirosNegativos, falsosPositivos, falsosNegativos, AUC] = mlp(fileTr, fileVal, fileTeste, sampTr, sampVal, amostrasTeste, neuHidden, taxaApr, funcAtiv, algoApren);\n\n%Erro médio quadratico\ndisplay('Erro medio quadratico (MSE):');\ndisplay(['Conjunto de treino: ' num2str(MSEtreino)]);\ndisplay(['Conjunto de validacao: ' num2str(MSEvalidacao)]);\ndisplay(['Conjunto de teste: ' num2str(MSEteste)]);\ndisplay('------------------------------------------------');\n\n%Dados de acertos e erros\ndisplay('Erros e acertos:');\ndisplay(['Total de casos testados: ' num2str(amostrasTeste)]);\ndisplay(['Casos em que acertou: ' num2str(verdadeirosPositivos+falsosNegativos)]);\ndisplay(['Casos em que errou: ' num2str(verdadeirosNegativos+falsosPositivos)]);\ndisplay(['Verdadeiros Positivos: ' num2str(verdadeirosPositivos)]);\ndisplay(['Verdadeiros Negativos: ' num2str(verdadeirosNegativos)]);\ndisplay(['Falsos Positivos: ' num2str(falsosPositivos)]);\ndisplay(['Falsos Negativos: ' num2str(falsosNegativos)]);\ndisplay('------------------------------------------------');\n\n%Valores utilizados para os parametros\ndisplay('Melhores parametros:');\ndisplay(['Taxa de aprendizado: ' num2str(taxaApr)]);\ndisplay(['Neuronios na camada intermediaria: ' num2str(neuHidden)]);\ndisplay(['Funcao de ativacao: ' funcAtiv]);\ndisplay(['Algoritmo de aprendizagem: ' algoApren]);\ndisplay(['Conjunto de treinamento: ' fileTr]);\ndisplay('------------------------------------------------');\n\n%Pra fazer a matriz de confusao pro slide\nPorcentVerdPosit = 100*(verdadeirosPositivos)/(amostrasTeste);\nPorcenVerdNegat =  100*(verdadeirosNegativos)/(amostrasTeste);\nPorcentFalsPosit = 100*(falsosPositivos)/(amostrasTeste);\nPorcentFalsNegat = 100*(falsosNegativos)/(amostrasTeste);\n\ndisplay('Matriz de Confusao: (Em porcentagem)');\ndisplay(['Verdadeiros Positivos: ' num2str(PorcentVerdPosit)]);\ndisplay(['Verdadeiros Negativos: ' num2str(PorcenVerdNegat)]);\ndisplay(['Falsos Positivos: ' num2str(PorcentFalsPosit)]);\ndisplay(['Falsos Negativos: ' num2str(PorcentFalsNegat)]);\n\n%Área sobre a curva ROC\ndisplay(['Area Sob a Curva ROC (AUC): ' num2str(AUC)]);","undoManager":{"mark":-1,"position":-1,"stack":[]},"ace":{"folds":[],"customSyntax":"matlab","scrolltop":0,"scrollleft":0,"selection":{"start":{"row":41,"column":57},"end":{"row":41,"column":57},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1450227677000}