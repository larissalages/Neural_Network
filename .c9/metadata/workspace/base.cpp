{"filter":false,"title":"base.cpp","tooltip":"/base.cpp","undoManager":{"mark":0,"position":0,"stack":[[{"start":{"row":0,"column":0},"end":{"row":483,"column":0},"action":"remove","lines":["#include <cstdio>","#include <cstdlib>","#include <ctime>","#include <vector>","","using namespace std;","","class Sample","{","\tprivate:","\t\tint A_TOTAL_AMT_DELQ_1;","\t\tdouble A_TOTAL_BALANCES;","\t\tdouble A_TOTAL_NBR_ACCTS;","\t\tint MARITAL_STATUS_1;","\t\tint MARITAL_STATUS_2;","\t\tint MARITAL_STATUS_3;","\t\tint MARITAL_STATUS_4;","\t\tint RENT_BUY_CODE_1;","\t\tint RENT_BUY_CODE_2;","\t\tint RENT_BUY_CODE_3;","\t\tint RENT_BUY_CODE_4;","\t\tdouble CURR_RES_MTHS;","\t\tdouble PREV_RES_MTHS;","\t\tdouble OCCN_CODE;","\t\tdouble CURR_EMPL_MTHS;","\t\tdouble PREV_EMPL_MTHS;","\t\tint CHQ_ACCT_IND_1;","\t\tint CHQ_ACCT_IND_2;","\t\tint CHQ_ACCT_IND_3;","\t\tint SAV_ACCT_IND_1;","\t\tint SAV_ACCT_IND_2;","\t\tint SAV_ACCT_IND_3;","\t\tdouble TOTAL_NBR_CREDIT_CARDS;","\t\tdouble NBR_OF_DEPENDANTS;","\t\tint AMEX_CARD_1;","\t\tint DINERS_CARD_1;","\t\tint VISA_CARD_1;","\t\tint MASTERCARD_1;","\t\tint RETAIL_CARDS_1;","\t\tdouble B_ENQ_LAST_WEEK;","\t\tdouble B_ENQ_L1M;","\t\tdouble B_ENQ_L3M;","\t\tdouble B_ENQ_L6M_GR1;","\t\tdouble B_ENQ_L6M_GR2;","\t\tdouble B_ENQ_L6M_GR3;","\t\tdouble B_ENQ_L12M_GR1;","\t\tdouble B_ENQ_L12M_GR2;","\t\tdouble B_ENQ_L12M_GR3;","\t\tint B_DEF_PAID_L12M;","\t\tdouble B_ENQ_L6M;","\t\tint B_DEF_PAID_IND_1;","\t\tint B_DEF_UNPD_IND_1;","\t\tdouble A_DISTRICT_APPLICANT;","\t\tint DVR_LIC;","\t\tint CREDIT_CARD_TYPE_1;","\t\tdouble AGE_AT_APPLICATION;","\t\tint TARGET_FLAG_1;","\t\tint TARGET_FLAG_2;","","\tpublic:","\t\tSample() { }","\t\t~Sample() { }","\t\tbool isFromClass1();","\t\tbool ReadSampleFromFile(FILE* f);","\t\tvoid WriteSampleToFile(FILE* f);","};","","bool Sample::isFromClass1()","{ ","\tif(TARGET_FLAG_1 == 0 && TARGET_FLAG_2 == 1)","\t\treturn true;","\telse","\t\treturn false;","}","","bool Sample::ReadSampleFromFile(FILE* f)","{","\tif( ","\tfscanf(f, \"%d %lf %lf %d %d %d %d %d %d %d %d %lf %lf %lf %lf %lf %d %d %d %d %d %d %lf %lf %d %d %d %d %d %lf %lf %lf %lf %lf %lf %lf %lf %lf %d %lf %d %d %lf %d %d %lf %d %d\", ","\t&A_TOTAL_AMT_DELQ_1, &A_TOTAL_BALANCES, &A_TOTAL_NBR_ACCTS, &MARITAL_STATUS_1, &MARITAL_STATUS_2, &MARITAL_STATUS_3, &MARITAL_STATUS_4, &RENT_BUY_CODE_1,"," \t&RENT_BUY_CODE_2, &RENT_BUY_CODE_3, &RENT_BUY_CODE_4, &CURR_RES_MTHS, &PREV_RES_MTHS, &OCCN_CODE, &CURR_EMPL_MTHS, &PREV_EMPL_MTHS, &CHQ_ACCT_IND_1, &CHQ_ACCT_IND_2, ","\t&CHQ_ACCT_IND_3, &SAV_ACCT_IND_1, &SAV_ACCT_IND_2, &SAV_ACCT_IND_3, &TOTAL_NBR_CREDIT_CARDS, &NBR_OF_DEPENDANTS, &AMEX_CARD_1, &DINERS_CARD_1, &VISA_CARD_1, ","\t&MASTERCARD_1, &RETAIL_CARDS_1,\t&B_ENQ_LAST_WEEK, &B_ENQ_L1M, &B_ENQ_L3M, &B_ENQ_L6M_GR1, &B_ENQ_L6M_GR2, &B_ENQ_L6M_GR3, &B_ENQ_L12M_GR1, &B_ENQ_L12M_GR2, &B_ENQ_L12M_GR3, "," \t&B_DEF_PAID_L12M, &B_ENQ_L6M, &B_DEF_PAID_IND_1, &B_DEF_UNPD_IND_1, &A_DISTRICT_APPLICANT, &DVR_LIC, &CREDIT_CARD_TYPE_1, &AGE_AT_APPLICATION, &TARGET_FLAG_1, &TARGET_FLAG_2) <= 0","\t)","\t\treturn false;","\telse","\t\treturn true;","}","","void Sample::WriteSampleToFile(FILE* f)","{","\tfprintf(f, \"%d %lf %lf %d %d %d %d %d %d %d %d %lf %lf %lf %lf %lf %d %d %d %d %d %d %lf %lf %d %d %d %d %d %lf %lf %lf %lf %lf %lf %lf %lf %lf %d %lf %d %d %lf %d %d %lf %d %d\\n\", ","\tA_TOTAL_AMT_DELQ_1, A_TOTAL_BALANCES, A_TOTAL_NBR_ACCTS, MARITAL_STATUS_1, MARITAL_STATUS_2, MARITAL_STATUS_3, MARITAL_STATUS_4, RENT_BUY_CODE_1,"," \tRENT_BUY_CODE_2, RENT_BUY_CODE_3, RENT_BUY_CODE_4, CURR_RES_MTHS, PREV_RES_MTHS, OCCN_CODE, CURR_EMPL_MTHS, PREV_EMPL_MTHS, CHQ_ACCT_IND_1, CHQ_ACCT_IND_2, ","\tCHQ_ACCT_IND_3, SAV_ACCT_IND_1, SAV_ACCT_IND_2, SAV_ACCT_IND_3, TOTAL_NBR_CREDIT_CARDS, NBR_OF_DEPENDANTS, AMEX_CARD_1, DINERS_CARD_1, VISA_CARD_1, ","\tMASTERCARD_1, RETAIL_CARDS_1,\tB_ENQ_LAST_WEEK, B_ENQ_L1M, B_ENQ_L3M, B_ENQ_L6M_GR1, B_ENQ_L6M_GR2, B_ENQ_L6M_GR3, B_ENQ_L12M_GR1, B_ENQ_L12M_GR2, B_ENQ_L12M_GR3, "," \tB_DEF_PAID_L12M, B_ENQ_L6M, B_DEF_PAID_IND_1, B_DEF_UNPD_IND_1, A_DISTRICT_APPLICANT, DVR_LIC, CREDIT_CARD_TYPE_1, AGE_AT_APPLICATION, TARGET_FLAG_1, TARGET_FLAG_2);","}","","void separate_classes()","{","\tFILE *f_original = fopen(\"original.txt\", \"r\");","\tFILE *f_class1 = fopen(\"class1.txt\", \"w\");","\tFILE *f_class2 = fopen(\"class2.txt\", \"w\");","\tvector<Sample> vClass1, vClass2;","\tSample s; ","","\t//Lê cada exemplo do arquivo e coloca no vetor da classe 1 ou da classe 2","\twhile(s.ReadSampleFromFile(f_original))","\t{","\t\tif(s.isFromClass1())","\t\t\tvClass1.push_back(s);","\t\telse","\t\t\tvClass2.push_back(s);","\t}","","\t//Escreve o arquivo de exemplos da classe 1 aleatoriamente","\twhile(vClass1.size() > 0)","\t{","       \tint indice = rand()%vClass1.size();","\t\tvClass1[indice].WriteSampleToFile(f_class1);","       \tvClass1.erase(vClass1.begin()+indice);","\t}","","\t//Escreve o arquivo de exemplos da classe 2 aleatoriamente","\twhile(vClass2.size() > 0)","\t{","       \tint indice = rand()%vClass2.size();","\t\tvClass2[indice].WriteSampleToFile(f_class2);","       \tvClass2.erase(vClass2.begin()+indice);","\t}","","","\tfclose(f_original);","\tfclose(f_class1);","\tfclose(f_class2);","}","","void separate_sets()","{","\tFILE *f_class1, *f_class1_treino, *f_class1_validacao, *f_class1_teste;","\tFILE *f_class2, *f_class2_treino, *f_class2_validacao, *f_class2_teste;","\tvector<Sample> vClass1, vClass2;","\tSample s;","","\tf_class1 = fopen(\"class1.txt\", \"r\");","\tf_class1_treino = fopen(\"class1_treino.txt\", \"w\");","\tf_class1_validacao = fopen(\"class1_validacao.txt\", \"w\");","\tf_class1_teste = fopen(\"class1_teste.txt\", \"w\");","","\tf_class2 = fopen(\"class2.txt\", \"r\");","\tf_class2_treino = fopen(\"class2_treino.txt\", \"w\");","\tf_class2_validacao = fopen(\"class2_validacao.txt\", \"w\");","\tf_class2_teste = fopen(\"class2_teste.txt\", \"w\");","","\t//Lê os exemplos dos arquivos de classe","\twhile(s.ReadSampleFromFile(f_class1))","\t\tvClass1.push_back(s);","\twhile(s.ReadSampleFromFile(f_class2))","\t\tvClass2.push_back(s);","","\t//Separa a classe 1 em 3 arquivos (treino, validação e teste)","\tfor(int i = 0; i < vClass1.size()/2; i++)","\t\tvClass1[i].WriteSampleToFile(f_class1_treino);","\tfor(int i = vClass1.size()/2; i < (vClass1.size()/2 + vClass1.size()/4); i++)","\t\tvClass1[i].WriteSampleToFile(f_class1_validacao);","\tfor(int i = (vClass1.size()/2 + vClass1.size()/4); i < vClass1.size(); i++)","\t\tvClass1[i].WriteSampleToFile(f_class1_teste);","","\t//Separa a classe 2 em 3 arquivos (treino, validação e teste)","\tfor(int i = 0; i < vClass2.size()/2; i++)","\t\tvClass2[i].WriteSampleToFile(f_class2_treino);","\tfor(int i = vClass2.size()/2; i < (vClass2.size()/2 + vClass2.size()/4); i++)","\t\tvClass2[i].WriteSampleToFile(f_class2_validacao);","\tfor(int i = (vClass2.size()/2 + vClass2.size()/4); i < vClass2.size(); i++)","\t\tvClass2[i].WriteSampleToFile(f_class2_teste);","","\tfclose(f_class1);","\tfclose(f_class1_treino);","\tfclose(f_class1_validacao);","\tfclose(f_class1_teste);","\tfclose(f_class2);","\tfclose(f_class2_treino);","\tfclose(f_class2_validacao);","\tfclose(f_class2_teste);","}","","void reduce_and_replicate()","{","\tFILE *f_class1_treino, *f_class2_treino;","\tFILE *f_class1_validacao, *f_class2_validacao;","\tFILE *f_class1_treino_reduzido, *f_class2_treino_replicado;","\tFILE *f_class1_validacao_reduzido, *f_class2_validacao_replicado;","\tvector<Sample> vClass1, vClass2, vClass1_reduzido, vClass2_replicado;","\tint size1, size2;","\tSample s;","","\tf_class1_treino = fopen(\"class1_treino.txt\", \"r\");","\tf_class2_treino = fopen(\"class2_treino.txt\", \"r\");","\tf_class1_validacao = fopen(\"class1_validacao.txt\", \"r\");","\tf_class2_validacao = fopen(\"class2_validacao.txt\", \"r\");","\tf_class1_treino_reduzido = fopen(\"class1_treino_reduzido.txt\", \"w\");","\tf_class2_treino_replicado = fopen(\"class2_treino_replicado.txt\", \"w\");","\tf_class1_validacao_reduzido = fopen(\"class1_validacao_reduzido.txt\", \"w\");","\tf_class2_validacao_replicado = fopen(\"class2_validacao_replicado.txt\", \"w\");","","\t//---------------------------------------------------------------------","","\t//Adiciona os exemplos de treino da classe 1 no vetor 1","\twhile(s.ReadSampleFromFile(f_class1_treino))","\t\tvClass1.push_back(s);","\tsize1 = vClass1.size();","\t","\t//Adiciona os exemplos de treino da classe 2 no vetor 2","\twhile(s.ReadSampleFromFile(f_class2_treino))","\t\tvClass2.push_back(s);","\tsize2 = vClass2.size();","\t","\t//reduz o conjunto de treino da classe 1","\twhile(vClass1_reduzido.size() < size2)","\t{","\t  \tint indice = rand()%vClass1.size();","       \tvClass1_reduzido.push_back(vClass1[indice]);","       \tvClass1.erase(vClass1.begin()+indice);","\t}","","\t//replica o conjunto de treino da classe 2","\tint i = 0;","\twhile(vClass2_replicado.size() < size1)","\t{","\t\tvClass2_replicado.push_back(vClass2[i]);","\t\t","\t\ti++;","\t\tif(i >= vClass2.size())","\t\t\ti = 0;","\t}","","\t//Escreve o novo arquivo de treino reduzido da classe 1","\tfor(i = 0; i < vClass1_reduzido.size(); i++)","\t\tvClass1_reduzido[i].WriteSampleToFile(f_class1_treino_reduzido);","","\t//Escreve o novo arquivo de treino replicado da classe 2","\tfor(i = 0; i < vClass2_replicado.size(); i++)","\t\tvClass2_replicado[i].WriteSampleToFile(f_class2_treino_replicado);","","\t//---------------------------------------------------------------------","","\tvClass1.clear();","\tvClass2.clear();","\tvClass1_reduzido.clear();","\tvClass2_replicado.clear();","","\t//Adiciona os exemplos de validação da classe 1 no vetor 1","\twhile(s.ReadSampleFromFile(f_class1_validacao))","\t\tvClass1.push_back(s);","\tsize1 = vClass1.size();","\t","\t//Adiciona os exemplos de validação da classe 2 no vetor 2","\twhile(s.ReadSampleFromFile(f_class2_validacao))","\t\tvClass2.push_back(s);","\tsize2 = vClass2.size();","\t","\t//reduz o conjunto de validação da classe 1","\twhile(vClass1_reduzido.size() < size2)","\t{","\t  \tint indice = rand()%vClass1.size();","       \tvClass1_reduzido.push_back(vClass1[indice]);","       \tvClass1.erase(vClass1.begin()+indice);","\t}","","\t//replica o conjunto de validação da classe 2","\ti = 0;","\twhile(vClass2_replicado.size() < size1)","\t{","\t\tvClass2_replicado.push_back(vClass2[i]);","\t\t","\t\ti++;","\t\tif(i >= vClass2.size())","\t\t\ti = 0;","\t}","","\t//Escreve o novo arquivo de validação reduzido da classe 1","\tfor(i = 0; i < vClass1_reduzido.size(); i++)","\t\tvClass1_reduzido[i].WriteSampleToFile(f_class1_validacao_reduzido);","","\t//Escreve o novo arquivo de validação replicado da classe 2","\tfor(i = 0; i < vClass2_replicado.size(); i++)","\t\tvClass2_replicado[i].WriteSampleToFile(f_class2_validacao_replicado);","\t","\t//---------------------------------------------------------------------","","\tfclose(f_class1_treino);","\tfclose(f_class2_treino);","\tfclose(f_class1_validacao);","\tfclose(f_class2_validacao);","\tfclose(f_class1_treino_reduzido);","\tfclose(f_class2_treino_replicado);","\tfclose(f_class1_validacao_reduzido);","\tfclose(f_class2_validacao_replicado);","}","","void merge(int type)","{    ","\tFILE *f_class1, *f_class2, *f_merge;","\tvector<Sample> vClass1, vClass2, vMerge;","\tSample s;","","\t//Abre arquivos dependendo dos conjuntos que quer juntar que é controlado","\t//pelo parametro type","\tif(type == 0) //Undersampling random","\t{","\t\tf_class1 = fopen(\"class1_treino_reduzido.txt\", \"r\");","\t\tf_class2 = fopen(\"class2_treino.txt\", \"r\");","\t\tf_merge = fopen(\"treino_undersampling.txt\", \"w\");","\t}","\t","\telse if(type == 1) //oversampling replicado","\t{","\t\tf_class1 = fopen(\"class1_treino.txt\", \"r\");","\t\tf_class2 = fopen(\"class2_treino_replicado.txt\", \"r\");","\t\tf_merge = fopen(\"treino_oversampling.txt\", \"w\");","\t}","","\telse if(type == 2) //validacao random","\t{","\t\tf_class1 = fopen(\"class1_validacao_reduzido.txt\", \"r\");","\t\tf_class2 = fopen(\"class2_validacao.txt\", \"r\");","\t\tf_merge = fopen(\"validacao_undersampling.txt\", \"w\");","\t}","\t","\telse if(type == 3) //validcao replicado","\t{","\t\tf_class1 = fopen(\"class1_validacao.txt\", \"r\");","\t\tf_class2 = fopen(\"class2_validacao_replicado.txt\", \"r\");","\t\tf_merge = fopen(\"validacao_oversampling.txt\", \"w\");","\t}","","\telse if(type == 4)","\t{","\t\tf_class1 = fopen(\"class1_teste.txt\", \"r\");","\t\tf_class2 = fopen(\"class2_teste.txt\", \"r\");","\t\tf_merge = fopen(\"teste.txt\", \"w\");","\t}","\telse if(type == 5) //k means Treino","\t{","\t\tf_class1 = fopen(\"class1_treino_kmeans.txt\", \"r\");","\t\tf_class2 = fopen(\"class2_treino.txt\", \"r\");","\t\tf_merge = fopen(\"treino_undersamplingKM.txt\", \"w\");","\t}","\telse if(type == 6) //SMOTE Treino","\t{","\t\tf_class1 = fopen(\"class1_treino.txt\", \"r\");","\t\tf_class2 = fopen(\"class2_treino_oversampling_SMOTE.txt\", \"r\");","\t\tf_merge = fopen(\"treino_oversamplingSMT.txt\", \"w\");","\t}","\telse if(type == 7) //SMOTE adaptado Treino","\t{","\t\tf_class1 = fopen(\"class1_treino.txt\", \"r\");","\t\tf_class2 = fopen(\"class2_treino_oversampling_SMOTEadaptado.txt\", \"r\");","\t\tf_merge = fopen(\"treino_oversamplingSMTadp.txt\", \"w\");","\t}","\telse if(type == 8) //k means Validacao","\t{","\t\tf_class1 = fopen(\"class1_validacao_kmeans.txt\", \"r\");","\t\tf_class2 = fopen(\"class2_validacao.txt\", \"r\");","\t\tf_merge = fopen(\"validacao_undersamplingKM.txt\", \"w\");","\t}","\telse if(type == 9) //SMOTE Validacao","\t{","\t\tf_class1 = fopen(\"class1_validacao.txt\", \"r\");","\t\tf_class2 = fopen(\"class2_validacao_oversampling_SMOTE.txt\", \"r\");","\t\tf_merge = fopen(\"validacao_oversamplingSMT.txt\", \"w\");","","\t}","\telse if(type == 10) //SMOTE adaptado Validacao","\t{","\t\tf_class1 = fopen(\"class1_validacao.txt\", \"r\");","\t\tf_class2 = fopen(\"class2_validacao_oversampling_SMOTE_adaptado.txt\", \"r\");","\t\tf_merge = fopen(\"validacao_oversamplingSMTadp.txt\", \"w\");","\t}","","","    //Lê amostras da classe 1 e 2 e coloca nos vetores","\twhile(s.ReadSampleFromFile(f_class1))","\t\tvClass1.push_back(s);","\twhile(s.ReadSampleFromFile(f_class2))","\t\tvClass2.push_back(s);","","    //Gera vetor conjunto a partir do vClass1 e vClass2","    int size = vClass1.size() + vClass2.size();","    ","    while(vMerge.size() < size)","    {","        //Joga moeda e retira exemplo da classe 1 ou classe 2","\t\tint coin = rand()%2; ","","        if(coin == 0 || vClass2.size() == 0) //tira da classe 1","        {","\t\t\tif(vClass1.size() > 0)","\t\t\t{","            \tint indice = rand()%vClass1.size();","            \tvMerge.push_back(vClass1[indice]);","            \tvClass1.erase(vClass1.begin()+indice);","\t\t\t}","        }","        ","        else if(coin == 1 || vClass1.size() == 0)//tira da classe 2","        {","\t\t\tif(vClass2.size() > 0)","\t\t\t{","            \tint indice = rand()%vClass2.size();","            \tvMerge.push_back(vClass2[indice]);","            \tvClass2.erase(vClass2.begin()+indice);","\t\t\t}","        }","    }","    ","    //Escreve vMerge em arquivo","    for(unsigned int i = 0; i < vMerge.size(); i++)","\t\tvMerge[i].WriteSampleToFile(f_merge);","","","\tfclose(f_class1);","\tfclose(f_class2);","\tfclose(f_merge);","\t","","}","","int main()","{","\tsrand(time(NULL));","","\t//Abre base original e separa em 2 arquivos as classes diferentes","\tseparate_classes();","","\t//Separa cada arquivo de classe em conjuntos de treino, validação e teste","\tseparate_sets();","\t","\t//Cria novos conjuntos de treino e validação para classe1 e classe2 com redução","\t//de exemplos da classe 1 e com duplicação de exemplos da classe 2","\treduce_and_replicate();","\t","\t//Junta conjuntos de treino, validacao e teste da classe 1 e classe 2 para criar","\t//um conjunto só de cada categoria","","\tmerge(0);\t//conjunto de treino com undersampling randomico","\tmerge(1);\t//conjunto de treino com oversampling replicado","\tmerge(2);\t//conjunto de validacao com undersampling randomico","\tmerge(3);\t//conjunto de validacao com oversampling replicado","\tmerge(4);\t//conjunto de teste","\tprintf(\"A\\n\");","\tmerge(5);\t//conjunto de treino com undersampling k-means","\tprintf(\"B\\n\");","\tmerge(6);\t//conjunto de treino com oversampling SMOTE","\tprintf(\"C\\n\");","\tmerge(7);\t//conjunto de treino com oversampling SMOTE adaptado","\tprintf(\"D\\n\");","\tmerge(8);\t//conjunto de validacao com undersampling k-means","\tprintf(\"E\\n\");","\tmerge(9);\t//conjunto de validacao com oversampling SMOTE","\tprintf(\"F\\n\");","\tmerge(10);\t//conjunto de validacao com oversampling SMOTE adaptado","","\t//remove os arquivos desnecessários","\t//\t/*","\tremove(\"class1.txt\");","\tremove(\"class2.txt\");","\t//remove(\"class1_treino.txt\"); Usa pra fazer o k means","\t//remove(\"class1_validacao.txt\");","\tremove(\"class1_teste.txt\");","\t//remove(\"class2_treino.txt\");","\t//remove(\"class2_validacao.txt\");","\tremove(\"class2_teste.txt\");","\tremove(\"class1_treino_reduzido.txt\");","\tremove(\"class2_treino_replicado.txt\");","\tremove(\"class1_validacao_reduzido.txt\");","\tremove(\"class2_validacao_replicado.txt\");","\t//\t*/","","\treturn 0;","}",""],"id":2},{"start":{"row":0,"column":0},"end":{"row":490,"column":0},"action":"insert","lines":["#include <cstdio>","#include <cstdlib>","#include <ctime>","#include <vector>","","using namespace std;","","class Sample","{","\tprivate:","\t\tdouble A_TOTAL_AMT_DELQ_1;","\t\tdouble A_TOTAL_BALANCES;","\t\tdouble A_TOTAL_NBR_ACCTS;","\t\tdouble MARITAL_STATUS_1;","\t\tdouble MARITAL_STATUS_2;","\t\tdouble MARITAL_STATUS_3;","\t\tdouble MARITAL_STATUS_4;","\t\tdouble RENT_BUY_CODE_1;","\t\tdouble RENT_BUY_CODE_2;","\t\tdouble RENT_BUY_CODE_3;","\t\tdouble RENT_BUY_CODE_4;","\t\tdouble CURR_RES_MTHS;","\t\tdouble PREV_RES_MTHS;","\t\tdouble OCCN_CODE;","\t\tdouble CURR_EMPL_MTHS;","\t\tdouble PREV_EMPL_MTHS;","\t\tdouble CHQ_ACCT_IND_1;","\t\tdouble CHQ_ACCT_IND_2;","\t\tdouble CHQ_ACCT_IND_3;","\t\tdouble SAV_ACCT_IND_1;","\t\tdouble SAV_ACCT_IND_2;","\t\tdouble SAV_ACCT_IND_3;","\t\tdouble TOTAL_NBR_CREDIT_CARDS;","\t\tdouble NBR_OF_DEPENDANTS;","\t\tdouble AMEX_CARD_1;","\t\tdouble DINERS_CARD_1;","\t\tdouble VISA_CARD_1;","\t\tdouble MASTERCARD_1;","\t\tdouble RETAIL_CARDS_1;","\t\tdouble B_ENQ_LAST_WEEK;","\t\tdouble B_ENQ_L1M;","\t\tdouble B_ENQ_L3M;","\t\tdouble B_ENQ_L6M_GR1;","\t\tdouble B_ENQ_L6M_GR2;","\t\tdouble B_ENQ_L6M_GR3;","\t\tdouble B_ENQ_L12M_GR1;","\t\tdouble B_ENQ_L12M_GR2;","\t\tdouble B_ENQ_L12M_GR3;","\t\tdouble B_DEF_PAID_L12M;","\t\tdouble B_ENQ_L6M;","\t\tdouble B_DEF_PAID_IND_1;","\t\tdouble B_DEF_UNPD_IND_1;","\t\tdouble A_DISTRICT_APPLICANT;","\t\tdouble DVR_LIC;","\t\tdouble CREDIT_CARD_TYPE_1;","\t\tdouble AGE_AT_APPLICATION;","\t\tdouble TARGET_FLAG_1;","\t\tdouble TARGET_FLAG_2;","","\tpublic:","\t\tSample() { }","\t\t~Sample() { }","\t\tbool isFromClass1();","\t\tbool ReadSampleFromFile(FILE* f);","\t\tvoid WriteSampleToFile(FILE* f);","};","","bool Sample::isFromClass1()","{ ","\tif(TARGET_FLAG_1 == 0 && TARGET_FLAG_2 == 1)","\t\treturn true;","\telse","\t\treturn false;","}","","bool Sample::ReadSampleFromFile(FILE* f)","{","\tif( ","\tfscanf(f, \"%lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf\", ","\t&A_TOTAL_AMT_DELQ_1, &A_TOTAL_BALANCES, &A_TOTAL_NBR_ACCTS, &MARITAL_STATUS_1, &MARITAL_STATUS_2, &MARITAL_STATUS_3, &MARITAL_STATUS_4, &RENT_BUY_CODE_1,"," \t&RENT_BUY_CODE_2, &RENT_BUY_CODE_3, &RENT_BUY_CODE_4, &CURR_RES_MTHS, &PREV_RES_MTHS, &OCCN_CODE, &CURR_EMPL_MTHS, &PREV_EMPL_MTHS, &CHQ_ACCT_IND_1, &CHQ_ACCT_IND_2, ","\t&CHQ_ACCT_IND_3, &SAV_ACCT_IND_1, &SAV_ACCT_IND_2, &SAV_ACCT_IND_3, &TOTAL_NBR_CREDIT_CARDS, &NBR_OF_DEPENDANTS, &AMEX_CARD_1, &DINERS_CARD_1, &VISA_CARD_1, ","\t&MASTERCARD_1, &RETAIL_CARDS_1,\t&B_ENQ_LAST_WEEK, &B_ENQ_L1M, &B_ENQ_L3M, &B_ENQ_L6M_GR1, &B_ENQ_L6M_GR2, &B_ENQ_L6M_GR3, &B_ENQ_L12M_GR1, &B_ENQ_L12M_GR2, &B_ENQ_L12M_GR3, "," \t&B_DEF_PAID_L12M, &B_ENQ_L6M, &B_DEF_PAID_IND_1, &B_DEF_UNPD_IND_1, &A_DISTRICT_APPLICANT, &DVR_LIC, &CREDIT_CARD_TYPE_1, &AGE_AT_APPLICATION, &TARGET_FLAG_1, &TARGET_FLAG_2) <= 0","\t)","\t\treturn false;","\telse","\t\treturn true;","}","","void Sample::WriteSampleToFile(FILE* f)","{","\tfprintf(f, \"%lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf %lf\\n\", ","\tA_TOTAL_AMT_DELQ_1, A_TOTAL_BALANCES, A_TOTAL_NBR_ACCTS, MARITAL_STATUS_1, MARITAL_STATUS_2, MARITAL_STATUS_3, MARITAL_STATUS_4, RENT_BUY_CODE_1,"," \tRENT_BUY_CODE_2, RENT_BUY_CODE_3, RENT_BUY_CODE_4, CURR_RES_MTHS, PREV_RES_MTHS, OCCN_CODE, CURR_EMPL_MTHS, PREV_EMPL_MTHS, CHQ_ACCT_IND_1, CHQ_ACCT_IND_2, ","\tCHQ_ACCT_IND_3, SAV_ACCT_IND_1, SAV_ACCT_IND_2, SAV_ACCT_IND_3, TOTAL_NBR_CREDIT_CARDS, NBR_OF_DEPENDANTS, AMEX_CARD_1, DINERS_CARD_1, VISA_CARD_1, ","\tMASTERCARD_1, RETAIL_CARDS_1,\tB_ENQ_LAST_WEEK, B_ENQ_L1M, B_ENQ_L3M, B_ENQ_L6M_GR1, B_ENQ_L6M_GR2, B_ENQ_L6M_GR3, B_ENQ_L12M_GR1, B_ENQ_L12M_GR2, B_ENQ_L12M_GR3, "," \tB_DEF_PAID_L12M, B_ENQ_L6M, B_DEF_PAID_IND_1, B_DEF_UNPD_IND_1, A_DISTRICT_APPLICANT, DVR_LIC, CREDIT_CARD_TYPE_1, AGE_AT_APPLICATION, TARGET_FLAG_1, TARGET_FLAG_2);","}","","void separate_classes()","{","\tFILE *f_original = fopen(\"original.txt\", \"r\");","\tFILE *f_class1 = fopen(\"class1.txt\", \"w\");","\tFILE *f_class2 = fopen(\"class2.txt\", \"w\");","\tvector<Sample> vClass1, vClass2;","\tSample s; ","","\t//Lê cada exemplo do arquivo e coloca no vetor da classe 1 ou da classe 2","\twhile(s.ReadSampleFromFile(f_original))","\t{","\t\tif(s.isFromClass1())","\t\t\tvClass1.push_back(s);","\t\telse","\t\t\tvClass2.push_back(s);","\t}","","\t//Escreve o arquivo de exemplos da classe 1 aleatoriamente","\twhile(vClass1.size() > 0)","\t{","       \tint indice = rand()%vClass1.size();","\t\tvClass1[indice].WriteSampleToFile(f_class1);","       \tvClass1.erase(vClass1.begin()+indice);","\t}","","\t//Escreve o arquivo de exemplos da classe 2 aleatoriamente","\twhile(vClass2.size() > 0)","\t{","       \tint indice = rand()%vClass2.size();","\t\tvClass2[indice].WriteSampleToFile(f_class2);","       \tvClass2.erase(vClass2.begin()+indice);","\t}","","","\tfclose(f_original);","\tfclose(f_class1);","\tfclose(f_class2);","}","","void separate_sets()","{","\tFILE *f_class1, *f_class1_treino, *f_class1_validacao, *f_class1_teste;","\tFILE *f_class2, *f_class2_treino, *f_class2_validacao, *f_class2_teste;","\tvector<Sample> vClass1, vClass2;","\tSample s;","","\tf_class1 = fopen(\"class1.txt\", \"r\");","\tf_class1_treino = fopen(\"class1_treino.txt\", \"w\");","\tf_class1_validacao = fopen(\"class1_validacao.txt\", \"w\");","\tf_class1_teste = fopen(\"class1_teste.txt\", \"w\");","","\tf_class2 = fopen(\"class2.txt\", \"r\");","\tf_class2_treino = fopen(\"class2_treino.txt\", \"w\");","\tf_class2_validacao = fopen(\"class2_validacao.txt\", \"w\");","\tf_class2_teste = fopen(\"class2_teste.txt\", \"w\");","","\t//Lê os exemplos dos arquivos de classe","\twhile(s.ReadSampleFromFile(f_class1))","\t\tvClass1.push_back(s);","\twhile(s.ReadSampleFromFile(f_class2))","\t\tvClass2.push_back(s);","","\t//Separa a classe 1 em 3 arquivos (treino, validação e teste)","\tfor(int i = 0; i < vClass1.size()/2; i++)","\t\tvClass1[i].WriteSampleToFile(f_class1_treino);","\tfor(int i = vClass1.size()/2; i < (vClass1.size()/2 + vClass1.size()/4); i++)","\t\tvClass1[i].WriteSampleToFile(f_class1_validacao);","\tfor(int i = (vClass1.size()/2 + vClass1.size()/4); i < vClass1.size(); i++)","\t\tvClass1[i].WriteSampleToFile(f_class1_teste);","","\t//Separa a classe 2 em 3 arquivos (treino, validação e teste)","\tfor(int i = 0; i < vClass2.size()/2; i++)","\t\tvClass2[i].WriteSampleToFile(f_class2_treino);","\tfor(int i = vClass2.size()/2; i < (vClass2.size()/2 + vClass2.size()/4); i++)","\t\tvClass2[i].WriteSampleToFile(f_class2_validacao);","\tfor(int i = (vClass2.size()/2 + vClass2.size()/4); i < vClass2.size(); i++)","\t\tvClass2[i].WriteSampleToFile(f_class2_teste);","","\tfclose(f_class1);","\tfclose(f_class1_treino);","\tfclose(f_class1_validacao);","\tfclose(f_class1_teste);","\tfclose(f_class2);","\tfclose(f_class2_treino);","\tfclose(f_class2_validacao);","\tfclose(f_class2_teste);","}","","void reduce_and_replicate()","{","\tFILE *f_class1_treino, *f_class2_treino;","\tFILE *f_class1_validacao, *f_class2_validacao;","\tFILE *f_class1_treino_reduzido, *f_class2_treino_replicado;","\tFILE *f_class1_validacao_reduzido, *f_class2_validacao_replicado;","\tvector<Sample> vClass1, vClass2, vClass1_reduzido, vClass2_replicado;","\tint size1, size2;","\tSample s;","","\tf_class1_treino = fopen(\"class1_treino.txt\", \"r\");","\tf_class2_treino = fopen(\"class2_treino.txt\", \"r\");","\tf_class1_validacao = fopen(\"class1_validacao.txt\", \"r\");","\tf_class2_validacao = fopen(\"class2_validacao.txt\", \"r\");","\tf_class1_treino_reduzido = fopen(\"class1_treino_reduzido.txt\", \"w\");","\tf_class2_treino_replicado = fopen(\"class2_treino_replicado.txt\", \"w\");","\tf_class1_validacao_reduzido = fopen(\"class1_validacao_reduzido.txt\", \"w\");","\tf_class2_validacao_replicado = fopen(\"class2_validacao_replicado.txt\", \"w\");","","\t//---------------------------------------------------------------------","","\t//Adiciona os exemplos de treino da classe 1 no vetor 1","\twhile(s.ReadSampleFromFile(f_class1_treino))","\t\tvClass1.push_back(s);","\tsize1 = vClass1.size();","\t","\t//Adiciona os exemplos de treino da classe 2 no vetor 2","\twhile(s.ReadSampleFromFile(f_class2_treino))","\t\tvClass2.push_back(s);","\tsize2 = vClass2.size();","\t","\t//reduz o conjunto de treino da classe 1","\twhile(vClass1_reduzido.size() < size2)","\t{","\t  \tint indice = rand()%vClass1.size();","       \tvClass1_reduzido.push_back(vClass1[indice]);","       \tvClass1.erase(vClass1.begin()+indice);","\t}","","\t//replica o conjunto de treino da classe 2","\tint i = 0;","\twhile(vClass2_replicado.size() < size1)","\t{","\t\tvClass2_replicado.push_back(vClass2[i]);","\t\t","\t\ti++;","\t\tif(i >= vClass2.size())","\t\t\ti = 0;","\t}","","\t//Escreve o novo arquivo de treino reduzido da classe 1","\tfor(i = 0; i < vClass1_reduzido.size(); i++)","\t\tvClass1_reduzido[i].WriteSampleToFile(f_class1_treino_reduzido);","","\t//Escreve o novo arquivo de treino replicado da classe 2","\tfor(i = 0; i < vClass2_replicado.size(); i++)","\t\tvClass2_replicado[i].WriteSampleToFile(f_class2_treino_replicado);","","\t//---------------------------------------------------------------------","","\tvClass1.clear();","\tvClass2.clear();","\tvClass1_reduzido.clear();","\tvClass2_replicado.clear();","","\t//Adiciona os exemplos de validação da classe 1 no vetor 1","\twhile(s.ReadSampleFromFile(f_class1_validacao))","\t\tvClass1.push_back(s);","\tsize1 = vClass1.size();","\t","\t//Adiciona os exemplos de validação da classe 2 no vetor 2","\twhile(s.ReadSampleFromFile(f_class2_validacao))","\t\tvClass2.push_back(s);","\tsize2 = vClass2.size();","\t","\t//reduz o conjunto de validação da classe 1","\twhile(vClass1_reduzido.size() < size2)","\t{","\t  \tint indice = rand()%vClass1.size();","       \tvClass1_reduzido.push_back(vClass1[indice]);","       \tvClass1.erase(vClass1.begin()+indice);","\t}","","\t//replica o conjunto de validação da classe 2","\ti = 0;","\twhile(vClass2_replicado.size() < size1)","\t{","\t\tvClass2_replicado.push_back(vClass2[i]);","\t\t","\t\ti++;","\t\tif(i >= vClass2.size())","\t\t\ti = 0;","\t}","","\t//Escreve o novo arquivo de validação reduzido da classe 1","\tfor(i = 0; i < vClass1_reduzido.size(); i++)","\t\tvClass1_reduzido[i].WriteSampleToFile(f_class1_validacao_reduzido);","","\t//Escreve o novo arquivo de validação replicado da classe 2","\tfor(i = 0; i < vClass2_replicado.size(); i++)","\t\tvClass2_replicado[i].WriteSampleToFile(f_class2_validacao_replicado);","\t","\t//---------------------------------------------------------------------","","\tfclose(f_class1_treino);","\tfclose(f_class2_treino);","\tfclose(f_class1_validacao);","\tfclose(f_class2_validacao);","\tfclose(f_class1_treino_reduzido);","\tfclose(f_class2_treino_replicado);","\tfclose(f_class1_validacao_reduzido);","\tfclose(f_class2_validacao_replicado);","}","","void merge(int type)","{    ","\tFILE *f_class1, *f_class2, *f_merge;","\tvector<Sample> vClass1, vClass2, vMerge;","\tSample s;","","\t//Abre arquivos dependendo dos conjuntos que quer juntar que é controlado","\t//pelo parametro type","\tif(type == 0) //Undersampling random","\t{","\t\tf_class1 = fopen(\"class1_treino_reduzido.txt\", \"r\");","\t\tf_class2 = fopen(\"class2_treino.txt\", \"r\");","\t\tf_merge = fopen(\"treino_undersampling.txt\", \"w\");","\t}","\t","\telse if(type == 1) //oversampling replicado","\t{","\t\tf_class1 = fopen(\"class1_treino.txt\", \"r\");","\t\tf_class2 = fopen(\"class2_treino_replicado.txt\", \"r\");","\t\tf_merge = fopen(\"treino_oversampling.txt\", \"w\");","\t}","","\telse if(type == 2) //validacao random","\t{","\t\tf_class1 = fopen(\"class1_validacao_reduzido.txt\", \"r\");","\t\tf_class2 = fopen(\"class2_validacao.txt\", \"r\");","\t\tf_merge = fopen(\"validacao_undersampling.txt\", \"w\");","\t}","\t","\telse if(type == 3) //validcao replicado","\t{","\t\tf_class1 = fopen(\"class1_validacao.txt\", \"r\");","\t\tf_class2 = fopen(\"class2_validacao_replicado.txt\", \"r\");","\t\tf_merge = fopen(\"validacao_oversampling.txt\", \"w\");","\t}","","\telse if(type == 4)","\t{","\t\tf_class1 = fopen(\"class1_teste.txt\", \"r\");","\t\tf_class2 = fopen(\"class2_teste.txt\", \"r\");","\t\tf_merge = fopen(\"teste.txt\", \"w\");","\t}","\telse if(type == 5) //k means Treino","\t{","\t\tf_class1 = fopen(\"class1_treino_kmeans.txt\", \"r\");","\t\tf_class2 = fopen(\"class2_treino.txt\", \"r\");","\t\tf_merge = fopen(\"treino_undersamplingKM.txt\", \"w\");","\t}","\telse if(type == 6) //SMOTE Treino","\t{","\t\tf_class1 = fopen(\"class1_treino.txt\", \"r\");","\t\tf_class2 = fopen(\"class2_treino_oversampling_SMOTE.txt\", \"r\");","\t\tf_merge = fopen(\"treino_oversamplingSMT.txt\", \"w\");","\t}","\telse if(type == 7) //SMOTE adaptado Treino","\t{","\t\tf_class1 = fopen(\"class1_treino.txt\", \"r\");","\t\tf_class2 = fopen(\"class2_treino_oversampling_SMOTEadaptado.txt\", \"r\");","\t\tf_merge = fopen(\"treino_oversamplingSMTadp.txt\", \"w\");","\t}","\telse if(type == 8) //k means Validacao","\t{","\t\tf_class1 = fopen(\"class1_validacao_kmeans.txt\", \"r\");","\t\tf_class2 = fopen(\"class2_validacao.txt\", \"r\");","\t\tf_merge = fopen(\"validacao_undersamplingKM.txt\", \"w\");","\t}","\telse if(type == 9) //SMOTE Validacao","\t{","\t\tf_class1 = fopen(\"class1_validacao.txt\", \"r\");","\t\tf_class2 = fopen(\"class2_validacao_oversampling_SMOTE.txt\", \"r\");","\t\tf_merge = fopen(\"validacao_oversamplingSMT.txt\", \"w\");","","\t}","\telse if(type == 10) //SMOTE adaptado Validacao","\t{","\t\tf_class1 = fopen(\"class1_validacao.txt\", \"r\");","\t\tf_class2 = fopen(\"class2_validacao_oversampling_SMOTE_adaptado.txt\", \"r\");","\t\tf_merge = fopen(\"validacao_oversamplingSMTadp.txt\", \"w\");","\t}","","\t","    //Lê amostras da classe 1 e 2 e coloca nos vetores","\twhile(s.ReadSampleFromFile(f_class1))","\t\tvClass1.push_back(s);","","\twhile(s.ReadSampleFromFile(f_class2))","\t\tvClass2.push_back(s);","","    //Gera vetor conjunto a partir do vClass1 e vClass2","    int size = vClass1.size() + vClass2.size();","","    if(type==5)","    {","    \tprintf(\"O tamanho do vetor eh: %d\\n\",vClass1.size());","    \t","    }","    ","    while(vMerge.size() < size)","    {","        //Joga moeda e retira exemplo da classe 1 ou classe 2","\t\tint coin = rand()%2; ","","        if(coin == 0 || vClass2.size() == 0) //tira da classe 1","        {","\t\t\tif(vClass1.size() > 0)","\t\t\t{","            \tint indice = rand()%vClass1.size();","            \tvMerge.push_back(vClass1[indice]);","            \tvClass1.erase(vClass1.begin()+indice);","\t\t\t}","        }","        ","        else if(coin == 1 || vClass1.size() == 0)//tira da classe 2","        {","\t\t\tif(vClass2.size() > 0)","\t\t\t{","            \tint indice = rand()%vClass2.size();","            \tvMerge.push_back(vClass2[indice]);","            \tvClass2.erase(vClass2.begin()+indice);","\t\t\t}","        }","    }","    ","    //Escreve vMerge em arquivo","    for(unsigned int i = 0; i < vMerge.size(); i++)","\t\tvMerge[i].WriteSampleToFile(f_merge);","","","\tfclose(f_class1);","\tfclose(f_class2);","\tfclose(f_merge);","\t","","}","","int main()","{","\tsrand(time(NULL));","","\t//Abre base original e separa em 2 arquivos as classes diferentes","\tseparate_classes();","","\t//Separa cada arquivo de classe em conjuntos de treino, validação e teste","\tseparate_sets();","\t","\t//Cria novos conjuntos de treino e validação para classe1 e classe2 com redução","\t//de exemplos da classe 1 e com duplicação de exemplos da classe 2","\treduce_and_replicate();","\t","\t//Junta conjuntos de treino, validacao e teste da classe 1 e classe 2 para criar","\t//um conjunto só de cada categoria","","\tmerge(0);\t//conjunto de treino com undersampling randomico","\tmerge(1);\t//conjunto de treino com oversampling replicado","\tmerge(2);\t//conjunto de validacao com undersampling randomico","\tmerge(3);\t//conjunto de validacao com oversampling replicado","\tmerge(4);\t//conjunto de teste","\t//printf(\"A\\n\");","\tmerge(5);\t//conjunto de treino com undersampling k-means","\t//printf(\"B\\n\");","\tmerge(6);\t//conjunto de treino com oversampling SMOTE","\t//printf(\"C\\n\");","\tmerge(7);\t//conjunto de treino com oversampling SMOTE adaptado","\t//printf(\"D\\n\");","\tmerge(8);\t//conjunto de validacao com undersampling k-means","\t//printf(\"E\\n\");","\tmerge(9);\t//conjunto de validacao com oversampling SMOTE","\t//printf(\"F\\n\");","\tmerge(10);\t//conjunto de validacao com oversampling SMOTE adaptado","","\t//remove os arquivos desnecessários","\t//\t/*","\tremove(\"class1.txt\");","\tremove(\"class2.txt\");","\t//remove(\"class1_treino.txt\"); Usa pra fazer o k means","\t//remove(\"class1_validacao.txt\");","\tremove(\"class1_teste.txt\");","\t//remove(\"class2_treino.txt\");","\t//remove(\"class2_validacao.txt\");","\tremove(\"class2_teste.txt\");","\tremove(\"class1_treino_reduzido.txt\");","\tremove(\"class2_treino_replicado.txt\");","\tremove(\"class1_validacao_reduzido.txt\");","\tremove(\"class2_validacao_replicado.txt\");","\t//\t*/","","\treturn 0;","}",""]}]]},"ace":{"folds":[],"scrolltop":6937.5,"scrollleft":0,"selection":{"start":{"row":388,"column":23},"end":{"row":388,"column":23},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":407,"state":"start","mode":"ace/mode/c_cpp"}},"timestamp":1448477605000,"hash":"e74ff88bb2c55aed68908e6abbb546a309229a1e"}